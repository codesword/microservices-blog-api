// Code generated by protoc-gen-go.
// source: blog/blog-svc.proto
// DO NOT EDIT!

/*
Package blog is a generated protocol buffer package.

It is generated from these files:
	blog/blog-svc.proto
	blog/blog.proto

It has these top-level messages:
	Empty
	Id
	Slug
	Comment
	Comments
	Post
	Posts
	BlogListRequest
*/
package blog

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BlogSvc service

type BlogSvcClient interface {
	GetPost(ctx context.Context, in *Slug, opts ...grpc.CallOption) (*Post, error)
	ListPosts(ctx context.Context, in *BlogListRequest, opts ...grpc.CallOption) (*Posts, error)
	CreatePost(ctx context.Context, in *Post, opts ...grpc.CallOption) (*Post, error)
	UpdateMyPost(ctx context.Context, in *Post, opts ...grpc.CallOption) (*Post, error)
	UpdatePost(ctx context.Context, in *Post, opts ...grpc.CallOption) (*Post, error)
	DeleteMyPost(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	DeletePost(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	ListCommentsForAPost(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Comments, error)
	CreateComment(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*Comment, error)
	UpdateMyComment(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*Comment, error)
	UpdateComment(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*Comment, error)
	DeleteMyComment(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	DeleteComment(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
}

type blogSvcClient struct {
	cc *grpc.ClientConn
}

func NewBlogSvcClient(cc *grpc.ClientConn) BlogSvcClient {
	return &blogSvcClient{cc}
}

func (c *blogSvcClient) GetPost(ctx context.Context, in *Slug, opts ...grpc.CallOption) (*Post, error) {
	out := new(Post)
	err := grpc.Invoke(ctx, "/blog.BlogSvc/GetPost", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogSvcClient) ListPosts(ctx context.Context, in *BlogListRequest, opts ...grpc.CallOption) (*Posts, error) {
	out := new(Posts)
	err := grpc.Invoke(ctx, "/blog.BlogSvc/ListPosts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogSvcClient) CreatePost(ctx context.Context, in *Post, opts ...grpc.CallOption) (*Post, error) {
	out := new(Post)
	err := grpc.Invoke(ctx, "/blog.BlogSvc/CreatePost", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogSvcClient) UpdateMyPost(ctx context.Context, in *Post, opts ...grpc.CallOption) (*Post, error) {
	out := new(Post)
	err := grpc.Invoke(ctx, "/blog.BlogSvc/updateMyPost", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogSvcClient) UpdatePost(ctx context.Context, in *Post, opts ...grpc.CallOption) (*Post, error) {
	out := new(Post)
	err := grpc.Invoke(ctx, "/blog.BlogSvc/updatePost", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogSvcClient) DeleteMyPost(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/blog.BlogSvc/DeleteMyPost", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogSvcClient) DeletePost(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/blog.BlogSvc/DeletePost", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogSvcClient) ListCommentsForAPost(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Comments, error) {
	out := new(Comments)
	err := grpc.Invoke(ctx, "/blog.BlogSvc/ListCommentsForAPost", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogSvcClient) CreateComment(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*Comment, error) {
	out := new(Comment)
	err := grpc.Invoke(ctx, "/blog.BlogSvc/CreateComment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogSvcClient) UpdateMyComment(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*Comment, error) {
	out := new(Comment)
	err := grpc.Invoke(ctx, "/blog.BlogSvc/updateMyComment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogSvcClient) UpdateComment(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*Comment, error) {
	out := new(Comment)
	err := grpc.Invoke(ctx, "/blog.BlogSvc/updateComment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogSvcClient) DeleteMyComment(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/blog.BlogSvc/DeleteMyComment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogSvcClient) DeleteComment(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/blog.BlogSvc/DeleteComment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BlogSvc service

type BlogSvcServer interface {
	GetPost(context.Context, *Slug) (*Post, error)
	ListPosts(context.Context, *BlogListRequest) (*Posts, error)
	CreatePost(context.Context, *Post) (*Post, error)
	UpdateMyPost(context.Context, *Post) (*Post, error)
	UpdatePost(context.Context, *Post) (*Post, error)
	DeleteMyPost(context.Context, *Id) (*Empty, error)
	DeletePost(context.Context, *Id) (*Empty, error)
	ListCommentsForAPost(context.Context, *Empty) (*Comments, error)
	CreateComment(context.Context, *Comment) (*Comment, error)
	UpdateMyComment(context.Context, *Comment) (*Comment, error)
	UpdateComment(context.Context, *Comment) (*Comment, error)
	DeleteMyComment(context.Context, *Id) (*Empty, error)
	DeleteComment(context.Context, *Id) (*Empty, error)
}

func RegisterBlogSvcServer(s *grpc.Server, srv BlogSvcServer) {
	s.RegisterService(&_BlogSvc_serviceDesc, srv)
}

func _BlogSvc_GetPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Slug)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogSvcServer).GetPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.BlogSvc/GetPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogSvcServer).GetPost(ctx, req.(*Slug))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogSvc_ListPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlogListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogSvcServer).ListPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.BlogSvc/ListPosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogSvcServer).ListPosts(ctx, req.(*BlogListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogSvc_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Post)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogSvcServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.BlogSvc/CreatePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogSvcServer).CreatePost(ctx, req.(*Post))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogSvc_UpdateMyPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Post)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogSvcServer).UpdateMyPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.BlogSvc/UpdateMyPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogSvcServer).UpdateMyPost(ctx, req.(*Post))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogSvc_UpdatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Post)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogSvcServer).UpdatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.BlogSvc/UpdatePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogSvcServer).UpdatePost(ctx, req.(*Post))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogSvc_DeleteMyPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogSvcServer).DeleteMyPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.BlogSvc/DeleteMyPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogSvcServer).DeleteMyPost(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogSvc_DeletePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogSvcServer).DeletePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.BlogSvc/DeletePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogSvcServer).DeletePost(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogSvc_ListCommentsForAPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogSvcServer).ListCommentsForAPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.BlogSvc/ListCommentsForAPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogSvcServer).ListCommentsForAPost(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogSvc_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Comment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogSvcServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.BlogSvc/CreateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogSvcServer).CreateComment(ctx, req.(*Comment))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogSvc_UpdateMyComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Comment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogSvcServer).UpdateMyComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.BlogSvc/UpdateMyComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogSvcServer).UpdateMyComment(ctx, req.(*Comment))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogSvc_UpdateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Comment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogSvcServer).UpdateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.BlogSvc/UpdateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogSvcServer).UpdateComment(ctx, req.(*Comment))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogSvc_DeleteMyComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogSvcServer).DeleteMyComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.BlogSvc/DeleteMyComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogSvcServer).DeleteMyComment(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogSvc_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogSvcServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.BlogSvc/DeleteComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogSvcServer).DeleteComment(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _BlogSvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "blog.BlogSvc",
	HandlerType: (*BlogSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPost",
			Handler:    _BlogSvc_GetPost_Handler,
		},
		{
			MethodName: "ListPosts",
			Handler:    _BlogSvc_ListPosts_Handler,
		},
		{
			MethodName: "CreatePost",
			Handler:    _BlogSvc_CreatePost_Handler,
		},
		{
			MethodName: "updateMyPost",
			Handler:    _BlogSvc_UpdateMyPost_Handler,
		},
		{
			MethodName: "updatePost",
			Handler:    _BlogSvc_UpdatePost_Handler,
		},
		{
			MethodName: "DeleteMyPost",
			Handler:    _BlogSvc_DeleteMyPost_Handler,
		},
		{
			MethodName: "DeletePost",
			Handler:    _BlogSvc_DeletePost_Handler,
		},
		{
			MethodName: "ListCommentsForAPost",
			Handler:    _BlogSvc_ListCommentsForAPost_Handler,
		},
		{
			MethodName: "CreateComment",
			Handler:    _BlogSvc_CreateComment_Handler,
		},
		{
			MethodName: "updateMyComment",
			Handler:    _BlogSvc_UpdateMyComment_Handler,
		},
		{
			MethodName: "updateComment",
			Handler:    _BlogSvc_UpdateComment_Handler,
		},
		{
			MethodName: "DeleteMyComment",
			Handler:    _BlogSvc_DeleteMyComment_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _BlogSvc_DeleteComment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blog/blog-svc.proto",
}

func init() { proto.RegisterFile("blog/blog-svc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 429 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0xd3, 0xdd, 0x8a, 0xda, 0x40,
	0x14, 0x07, 0x70, 0x5a, 0x4a, 0xad, 0x47, 0xe3, 0xc7, 0x68, 0xa5, 0x1d, 0xa4, 0x60, 0x90, 0x96,
	0x4a, 0xeb, 0xd0, 0xf6, 0x4e, 0xa1, 0x1f, 0x6a, 0x5b, 0x0a, 0x2d, 0x94, 0x0a, 0x85, 0xd2, 0x8b,
	0x36, 0x9a, 0x21, 0x04, 0x92, 0x4c, 0xd6, 0x99, 0x08, 0x22, 0xde, 0xec, 0x2b, 0xec, 0x23, 0xed,
	0x23, 0xec, 0x2b, 0xec, 0x83, 0x2c, 0x33, 0x93, 0xc4, 0x64, 0x65, 0xb3, 0xee, 0x8d, 0x66, 0x26,
	0xf3, 0xff, 0x79, 0xe6, 0x1c, 0x84, 0xd6, 0xc2, 0x63, 0x0e, 0x91, 0x1f, 0xaf, 0xf9, 0x7a, 0x39,
	0x0c, 0x57, 0x4c, 0x30, 0xf4, 0x40, 0xae, 0x71, 0x3d, 0x7d, 0xa5, 0xb7, 0x71, 0xd7, 0x61, 0xcc,
	0xf1, 0x28, 0xb1, 0x42, 0x97, 0x58, 0x41, 0xc0, 0x84, 0x25, 0x5c, 0x16, 0x70, 0xfd, 0xf6, 0xed,
	0x79, 0x09, 0x4a, 0x13, 0x8f, 0x39, 0xf3, 0xf5, 0x12, 0x8d, 0xa1, 0xf4, 0x95, 0x8a, 0x9f, 0x8c,
	0x0b, 0x04, 0x43, 0x25, 0xcc, 0xbd, 0xc8, 0xc1, 0xf1, 0xb3, 0xdc, 0x37, 0x9f, 0x9c, 0x5e, 0x5c,
	0x9e, 0xdd, 0x47, 0xa8, 0x41, 0xd6, 0x6f, 0x48, 0xc8, 0xb8, 0xe0, 0x64, 0xcb, 0xbd, 0xc8, 0xd9,
	0xa1, 0x09, 0x94, 0xbf, 0xbb, 0x5c, 0xa5, 0x39, 0x7a, 0xac, 0x23, 0x12, 0x96, 0x9b, 0xbf, 0xe8,
	0x49, 0x44, 0xb9, 0xc0, 0x95, 0xbd, 0xc4, 0xcd, 0xa6, 0xa2, 0x2a, 0xa8, 0x9c, 0x52, 0x68, 0x04,
	0x30, 0x5d, 0x51, 0x4b, 0xd0, 0x6c, 0x0d, 0xf2, 0x39, 0x57, 0x43, 0x5b, 0x05, 0x6b, 0xe6, 0x3e,
	0x38, 0xba, 0x37, 0x40, 0x33, 0xa8, 0x46, 0xa1, 0x6d, 0x09, 0xfa, 0x63, 0x53, 0x98, 0xee, 0xaa,
	0x74, 0x07, 0x37, 0xf7, 0x37, 0xf0, 0x29, 0xd9, 0xba, 0xf6, 0x4e, 0x2a, 0x1f, 0x00, 0xb4, 0x52,
	0x68, 0x3c, 0x55, 0x46, 0x0b, 0xd7, 0x32, 0x5d, 0x88, 0x81, 0x8f, 0x50, 0x9d, 0x51, 0x8f, 0xa6,
	0x65, 0x3c, 0xd2, 0xb1, 0x6f, 0x76, 0x72, 0xf9, 0xcf, 0x7e, 0x28, 0x36, 0x89, 0x30, 0x38, 0xac,
	0x02, 0x8d, 0x01, 0xb4, 0x50, 0x94, 0xef, 0xa8, 0x7c, 0x63, 0x70, 0xad, 0x02, 0xf4, 0x07, 0xda,
	0xb2, 0xe1, 0x53, 0xe6, 0xfb, 0x34, 0x10, 0xfc, 0x0b, 0x5b, 0x7d, 0x52, 0x4c, 0x36, 0x8c, 0x6b,
	0x7a, 0x91, 0x1c, 0x32, 0xfb, 0x0a, 0x7b, 0x86, 0xba, 0x19, 0x4c, 0x7e, 0xfd, 0x73, 0xed, 0x1d,
	0x59, 0xc6, 0xa7, 0xd0, 0x6f, 0x30, 0xf4, 0x70, 0xe2, 0x1c, 0x32, 0x72, 0x0c, 0xce, 0x2f, 0xcd,
	0x17, 0x0a, 0xed, 0x99, 0x85, 0xa8, 0xec, 0xd8, 0x7f, 0xa8, 0x27, 0x83, 0x3b, 0x4e, 0x26, 0x4a,
	0x7e, 0x89, 0xfb, 0xf9, 0xde, 0x1d, 0xe0, 0xe9, 0x4c, 0xfe, 0x82, 0xa1, 0x7f, 0xe1, 0x38, 0xff,
	0x95, 0xf2, 0x9f, 0xe3, 0x5e, 0x51, 0xe5, 0x29, 0x3e, 0x85, 0x7a, 0x32, 0xf0, 0x84, 0xbf, 0xfb,
	0xcc, 0xdf, 0x83, 0xa1, 0x91, 0x5b, 0x88, 0x1b, 0xc6, 0xbe, 0x78, 0xa8, 0xfe, 0xcc, 0xef, 0xae,
	0x02, 0x00, 0x00, 0xff, 0xff, 0x32, 0x41, 0x97, 0xc2, 0x18, 0x04, 0x00, 0x00,
}
