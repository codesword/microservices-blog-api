// Code generated by protoc-gen-go.
// source: authorization/authorization-svc.proto
// DO NOT EDIT!

/*
Package authorization is a generated protocol buffer package.

It is generated from these files:
	authorization/authorization-svc.proto
	authorization/authorization.proto

It has these top-level messages:
	Empty
	ID
	Permission
	Permissions
	AlterPermissionsRequest
	Role
	Roles
	PermissionsToRoleRequest
	RolesToPermissionRequest
	RolesToUserRequest
	UsersToRoleRequest
	AuthorizeRequest
*/
package authorization

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AuthorizationSvc service

type AuthorizationSvcClient interface {
	// Get a single user permission
	//
	GetPermission(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Permission, error)
	ListPermissions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Permissions, error)
	AlterPermissions(ctx context.Context, in *AlterPermissionsRequest, opts ...grpc.CallOption) (*Empty, error)
	ListRoles(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Roles, error)
	CreateRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Role, error)
	UpdateRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Role, error)
	GetRole(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Role, error)
	AssignPermissionsToRole(ctx context.Context, in *PermissionsToRoleRequest, opts ...grpc.CallOption) (*Empty, error)
	AssignRolesToPermission(ctx context.Context, in *RolesToPermissionRequest, opts ...grpc.CallOption) (*Empty, error)
	AssignRolesToUser(ctx context.Context, in *RolesToUserRequest, opts ...grpc.CallOption) (*Empty, error)
	AssignUsersToRole(ctx context.Context, in *UsersToRoleRequest, opts ...grpc.CallOption) (*Empty, error)
}

type authorizationSvcClient struct {
	cc *grpc.ClientConn
}

func NewAuthorizationSvcClient(cc *grpc.ClientConn) AuthorizationSvcClient {
	return &authorizationSvcClient{cc}
}

func (c *authorizationSvcClient) GetPermission(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Permission, error) {
	out := new(Permission)
	err := grpc.Invoke(ctx, "/authorization.AuthorizationSvc/GetPermission", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationSvcClient) ListPermissions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Permissions, error) {
	out := new(Permissions)
	err := grpc.Invoke(ctx, "/authorization.AuthorizationSvc/ListPermissions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationSvcClient) AlterPermissions(ctx context.Context, in *AlterPermissionsRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/authorization.AuthorizationSvc/AlterPermissions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationSvcClient) ListRoles(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Roles, error) {
	out := new(Roles)
	err := grpc.Invoke(ctx, "/authorization.AuthorizationSvc/ListRoles", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationSvcClient) CreateRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Role, error) {
	out := new(Role)
	err := grpc.Invoke(ctx, "/authorization.AuthorizationSvc/CreateRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationSvcClient) UpdateRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Role, error) {
	out := new(Role)
	err := grpc.Invoke(ctx, "/authorization.AuthorizationSvc/UpdateRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationSvcClient) GetRole(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Role, error) {
	out := new(Role)
	err := grpc.Invoke(ctx, "/authorization.AuthorizationSvc/GetRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationSvcClient) AssignPermissionsToRole(ctx context.Context, in *PermissionsToRoleRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/authorization.AuthorizationSvc/AssignPermissionsToRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationSvcClient) AssignRolesToPermission(ctx context.Context, in *RolesToPermissionRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/authorization.AuthorizationSvc/AssignRolesToPermission", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationSvcClient) AssignRolesToUser(ctx context.Context, in *RolesToUserRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/authorization.AuthorizationSvc/AssignRolesToUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationSvcClient) AssignUsersToRole(ctx context.Context, in *UsersToRoleRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/authorization.AuthorizationSvc/AssignUsersToRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AuthorizationSvc service

type AuthorizationSvcServer interface {
	// Get a single user permission
	//
	GetPermission(context.Context, *ID) (*Permission, error)
	ListPermissions(context.Context, *Empty) (*Permissions, error)
	AlterPermissions(context.Context, *AlterPermissionsRequest) (*Empty, error)
	ListRoles(context.Context, *Empty) (*Roles, error)
	CreateRole(context.Context, *Role) (*Role, error)
	UpdateRole(context.Context, *Role) (*Role, error)
	GetRole(context.Context, *ID) (*Role, error)
	AssignPermissionsToRole(context.Context, *PermissionsToRoleRequest) (*Empty, error)
	AssignRolesToPermission(context.Context, *RolesToPermissionRequest) (*Empty, error)
	AssignRolesToUser(context.Context, *RolesToUserRequest) (*Empty, error)
	AssignUsersToRole(context.Context, *UsersToRoleRequest) (*Empty, error)
}

func RegisterAuthorizationSvcServer(s *grpc.Server, srv AuthorizationSvcServer) {
	s.RegisterService(&_AuthorizationSvc_serviceDesc, srv)
}

func _AuthorizationSvc_GetPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationSvcServer).GetPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authorization.AuthorizationSvc/GetPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationSvcServer).GetPermission(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationSvc_ListPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationSvcServer).ListPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authorization.AuthorizationSvc/ListPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationSvcServer).ListPermissions(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationSvc_AlterPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlterPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationSvcServer).AlterPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authorization.AuthorizationSvc/AlterPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationSvcServer).AlterPermissions(ctx, req.(*AlterPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationSvc_ListRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationSvcServer).ListRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authorization.AuthorizationSvc/ListRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationSvcServer).ListRoles(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationSvc_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationSvcServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authorization.AuthorizationSvc/CreateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationSvcServer).CreateRole(ctx, req.(*Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationSvc_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationSvcServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authorization.AuthorizationSvc/UpdateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationSvcServer).UpdateRole(ctx, req.(*Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationSvc_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationSvcServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authorization.AuthorizationSvc/GetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationSvcServer).GetRole(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationSvc_AssignPermissionsToRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionsToRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationSvcServer).AssignPermissionsToRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authorization.AuthorizationSvc/AssignPermissionsToRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationSvcServer).AssignPermissionsToRole(ctx, req.(*PermissionsToRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationSvc_AssignRolesToPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolesToPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationSvcServer).AssignRolesToPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authorization.AuthorizationSvc/AssignRolesToPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationSvcServer).AssignRolesToPermission(ctx, req.(*RolesToPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationSvc_AssignRolesToUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolesToUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationSvcServer).AssignRolesToUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authorization.AuthorizationSvc/AssignRolesToUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationSvcServer).AssignRolesToUser(ctx, req.(*RolesToUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationSvc_AssignUsersToRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersToRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationSvcServer).AssignUsersToRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authorization.AuthorizationSvc/AssignUsersToRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationSvcServer).AssignUsersToRole(ctx, req.(*UsersToRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuthorizationSvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "authorization.AuthorizationSvc",
	HandlerType: (*AuthorizationSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPermission",
			Handler:    _AuthorizationSvc_GetPermission_Handler,
		},
		{
			MethodName: "ListPermissions",
			Handler:    _AuthorizationSvc_ListPermissions_Handler,
		},
		{
			MethodName: "AlterPermissions",
			Handler:    _AuthorizationSvc_AlterPermissions_Handler,
		},
		{
			MethodName: "ListRoles",
			Handler:    _AuthorizationSvc_ListRoles_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _AuthorizationSvc_CreateRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _AuthorizationSvc_UpdateRole_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _AuthorizationSvc_GetRole_Handler,
		},
		{
			MethodName: "AssignPermissionsToRole",
			Handler:    _AuthorizationSvc_AssignPermissionsToRole_Handler,
		},
		{
			MethodName: "AssignRolesToPermission",
			Handler:    _AuthorizationSvc_AssignRolesToPermission_Handler,
		},
		{
			MethodName: "AssignRolesToUser",
			Handler:    _AuthorizationSvc_AssignRolesToUser_Handler,
		},
		{
			MethodName: "AssignUsersToRole",
			Handler:    _AuthorizationSvc_AssignUsersToRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authorization/authorization-svc.proto",
}

func init() { proto.RegisterFile("authorization/authorization-svc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 437 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x94, 0x4d, 0x0b, 0xd3, 0x30,
	0x1c, 0xc6, 0x99, 0x07, 0x75, 0x91, 0xbd, 0x34, 0x96, 0x8d, 0x85, 0xa1, 0xac, 0x6c, 0x0e, 0x0a,
	0xae, 0xbe, 0xdc, 0x76, 0x1b, 0x2a, 0x63, 0xb2, 0x83, 0xcc, 0xed, 0xa4, 0x20, 0x75, 0x0b, 0x33,
	0xd0, 0x35, 0x35, 0xc9, 0x06, 0x3a, 0x76, 0x11, 0x4f, 0x5e, 0xfd, 0x68, 0x7e, 0x05, 0x4f, 0x7e,
	0x0a, 0xc9, 0xbf, 0xd8, 0xa5, 0xb1, 0x2d, 0xe8, 0xa9, 0xf4, 0x9f, 0x27, 0xbf, 0xe7, 0x49, 0x9f,
	0x50, 0x34, 0x0a, 0x8f, 0xea, 0x03, 0x17, 0xec, 0x73, 0xa8, 0x18, 0x8f, 0x83, 0xdc, 0xdb, 0x43,
	0x79, 0xda, 0x4e, 0x12, 0xc1, 0x15, 0xc7, 0x8d, 0xdc, 0x02, 0xe9, 0xef, 0x39, 0xdf, 0x47, 0x34,
	0x08, 0x13, 0x16, 0x84, 0x71, 0xcc, 0x15, 0x8c, 0x65, 0x2a, 0x26, 0x83, 0x0a, 0x66, 0x2a, 0x79,
	0xf2, 0xeb, 0x36, 0x6a, 0xcf, 0xcc, 0xf9, 0xeb, 0xd3, 0x16, 0xbf, 0x41, 0x8d, 0x39, 0x55, 0xaf,
	0xa8, 0x38, 0x30, 0x29, 0x19, 0x8f, 0xb1, 0x33, 0xc9, 0xef, 0x5d, 0x3c, 0x27, 0x3d, 0x6b, 0x74,
	0x55, 0x7b, 0xfd, 0x2f, 0x3f, 0x7e, 0x7e, 0xbf, 0xd1, 0xc1, 0x6e, 0x70, 0x7a, 0x1c, 0x24, 0xd9,
	0x5c, 0x06, 0x67, 0xb6, 0xbb, 0xe0, 0xb7, 0xa8, 0xb5, 0x64, 0xd2, 0xa0, 0x4b, 0xec, 0x5a, 0xac,
	0x17, 0x87, 0x44, 0x7d, 0x22, 0xa4, 0xd4, 0x41, 0x7a, 0x5d, 0xb0, 0x70, 0x70, 0xcb, 0xb2, 0xc0,
	0x11, 0x6a, 0xcf, 0x22, 0x45, 0x85, 0x89, 0x7f, 0x60, 0x81, 0x6c, 0xc1, 0x8a, 0x7e, 0x3c, 0x52,
	0xa9, 0x48, 0x61, 0x0c, 0x8f, 0x80, 0x95, 0x4b, 0x6c, 0xab, 0x69, 0xcd, 0xc7, 0x2f, 0x51, 0x5d,
	0x9f, 0x65, 0xc5, 0x23, 0x5a, 0x76, 0x0a, 0x7b, 0x0a, 0x5a, 0xcf, 0x01, 0xe8, 0x1d, 0x5c, 0xd7,
	0x50, 0x01, 0xdb, 0x97, 0x08, 0x3d, 0x13, 0x34, 0x54, 0x54, 0x2b, 0xf0, 0xdd, 0x82, 0x6d, 0xa4,
	0x68, 0xe8, 0xb9, 0x80, 0x6a, 0x7a, 0x57, 0x94, 0x4e, 0xb6, 0x44, 0x68, 0x93, 0xec, 0xfe, 0x9b,
	0x46, 0xf2, 0xb4, 0x05, 0xba, 0x35, 0xa7, 0x70, 0xcc, 0xa2, 0xab, 0x50, 0x08, 0xea, 0x00, 0xa8,
	0x8d, 0x9b, 0x19, 0x28, 0xad, 0xff, 0x6b, 0x0d, 0x75, 0x67, 0x52, 0xb2, 0x7d, 0x6c, 0x34, 0xb0,
	0xe6, 0xc0, 0x1e, 0x97, 0x37, 0x9e, 0x2a, 0xaa, 0x9b, 0xf2, 0xc1, 0x72, 0x48, 0xee, 0x1b, 0x96,
	0xfa, 0xf1, 0x8e, 0xed, 0x2e, 0x76, 0x73, 0xdf, 0xb2, 0x18, 0x50, 0xc8, 0x9a, 0x1b, 0xb7, 0x7d,
	0x5c, 0x54, 0x99, 0xa9, 0xa8, 0x8e, 0xf1, 0x08, 0x62, 0xf8, 0x64, 0xf4, 0xd7, 0xf5, 0xbf, 0xbe,
	0x40, 0xa4, 0xec, 0xf3, 0x0a, 0xe4, 0xe4, 0xb2, 0x6c, 0x24, 0x15, 0x78, 0x50, 0x9c, 0x42, 0xaf,
	0x55, 0xfb, 0x0f, 0xc1, 0xff, 0x1e, 0xe9, 0x69, 0xff, 0xa3, 0xa4, 0x42, 0x06, 0x67, 0xfd, 0x28,
	0xf1, 0xd4, 0xc0, 0x3f, 0x05, 0xd8, 0x9e, 0xc6, 0xda, 0x3f, 0x78, 0xda, 0x9f, 0x1e, 0x32, 0x4c,
	0x6b, 0xfe, 0xfb, 0x9b, 0xf0, 0xcf, 0x79, 0xfa, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x24, 0xa4, 0x41,
	0x13, 0xec, 0x04, 0x00, 0x00,
}
